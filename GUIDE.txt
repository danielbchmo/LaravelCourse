LARAVEL COURSE

1. Install composer, Node.js and Xampp.
2. Create a new laravel project:
    composer create-project laravel/laravel <name>>

----------------------- config .env -----------------------
1. Access to .env file
2. Found DB_DATABASE=laravel and modifies with:
    DB_DATABASE=<name of your project>

------------------------- migration ------------------------
This part functions when we want to work whith our db and we want to create new tables.
It's to say, we always will work with this folder if we modify anything of the db.

1. /database/migration/
2. In the terminal, type:
    php artisan migrate
With this, we'll go to migrate all our tables directly to the db.

----------------------- model, controller and resource --------------
With a command, we'll go to create a new model. Laravel will acommodate the controller and
all the resources.

1. php artisan make:model Empleado -mcr

The new TABLE was created in migration folder.
MODEL was create in /app/Models/.
CONTROLLER was created in /app/http/Controllers/.

If you need yo check more information about the type of value, check:
https://laravel.com/docs/10.x/migrations#column-method-string

------------------------------ views folder --------------------------
You can found it inside of /app/resources/views/
It's all the code you can show in the design

There're a specific folder where you'll be able to move the main design that the users will see.
    /app/resources/routes/web.php

To create a new view, you need to name that file as <name>.blade.php

----------------------------Different way to access a route ----------------
If you go to a contoller directly, you'll have many functions.
One of them it's 'create', where you can return a view directly, but you'll need to import
that controller file in web.php:

1. To import:
    use <route>
    For example: App\Http\Controllers\EmpleadoController
    (Note the first letter must be with uppercase)

2. Inside of your controller file (in my case is EmpleadoController.php), put in a create function the next code:
    return view('<your view file>');

    For example:
        return view('employee.create');

3. Now, inside web.php file, code your route:
    Route::get('/employee/create',[EmpleadoController::class,'create']);
    (check web.php)

When you want to access to all the routes, very simple, just code the next:
    Route::resource('employee',EmpleadoController::class);

Now, you'll be able to handle all the routes that exists in your app.

You can check how many routes are active with the next command:
    php artisan route:list

-------------------------- Creating a Form -----------------------------
As an example, I used create.blade.php.

////IMAGES and FILES////
1. Call a form with post method.
2. For calling img or files, you need a property call:
    enctype='multipart/form-data'

-------------------------- Data recepton ------------------------------
In your form, there're an 'action' part where you need to put what it'll be the behavior
the page'll have.

1. Code the rute you'll use:
    <form action= {{url('/employee)}};

2. Laravel gives us a tool for sharing or sending information. This's a secure key:
    <form ....
        @csrf

3. In your controller file, in the store function, code the next:
    //a variable for testing
    $datos = request()->all();
    return response()->json($datos);
(With this you'll be able to check if your information is arriving, and with
the secure key, the data is arriving with a token.)

------------------------------ insert data -----------------------
1. Insert data inside db:
    //Receive all data except the token
        $datos = request()->except('_token');

    //Take Empleado model and insert them in the db
        Empleado::insert( $datos );

    //Show the information
        return response()->json($datos);

-------------------------- Add img --------------------------------------
To insert a photo, it's necessary to create an IF:

1. If the file that you're sending it has something, we'll modify the file's name.

    if($request->hasFile('Foto')){
        //datos is equal to foto's name, and store it in a function with name uploads in the folder public
        $datos['Foto']=$request->file('Foto)->store('uploads','public');
    }

(You can access your file in:
    /storage/app/public/uploads/    
)

----------------------------- Query data -------------------------------
In this case, we need to use index function of your EmpleadoController.
Also, we'll use index.blade.php

1. Create a variable with the employee value.
    //                           we'll take the five first records.
    $datos['employees']=Empleado::paginate(5);

2. Return the data inside of the 'return'.
    return view('employee.index', $data);

3. Go to index.blade.php

4. You can create a design with bootstrap. The importa part of this is how we show the infor:
    
    @foreach ($employees as $employee)
        <information that you'll show>
    @endforeach

---------------------------- Delete data ---------------------------
1. You need to create a new form:post that you'll add, in the action, and url
    action={{ url('/empleado/'.$empleado->id)}}
    (This code has to aim to ID.)
    (Remember when you make a form, you have to create a key @csrf)

2. Create DELETE method:
    {{ method_field('DELETE') }}

3. Go EmpleadoController.php and look for destroy function:
    public function destroy($id)
    {
        Empleado::destroy($id);
        return redirect('employee');
    }

-------------------------------- Edit and update ----------------------------
In this case, we'l use form.blade.php

