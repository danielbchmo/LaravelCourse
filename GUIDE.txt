LARAVEL COURSE

1. Install composer, Node.js and Xampp.
2. Create a new laravel project:
    composer create-project laravel/laravel <name>>

----------------------- config .env -----------------------
1. Access to .env file
2. Found DB_DATABASE=laravel and modifies with:
    DB_DATABASE=<name of your project>

------------------------- migration ------------------------
This part functions when we want to work whith our db and we want to create new tables.
It's to say, we always will work with this folder if we modify anything of the db.

1. /database/migration/
2. In the terminal, type:
    php artisan migrate
With this, we'll go to migrate all our tables directly to the db.

----------------------- model, controller and resource --------------
With a command, we'll go to create a new model. Laravel will acommodate the controller and
all the resources.

1. php artisan make:model Empleado -mcr

The new TABLE was created in migration folder.
MODEL was create in /app/Models/.
CONTROLLER was created in /app/http/Controllers/.

If you need yo check more information about the type of value, check:
https://laravel.com/docs/10.x/migrations#column-method-string

------------------------------ views folder --------------------------
You can found it inside of /app/resources/views/
It's all the code you can show in the design

There're a specific folder where you'll be able to move the main design that the users will see.
    /app/resources/routes/web.php

To create a new view, you need to name that file as <name>.blade.php

----------------------------Different way to access a route ----------------
If you go to a contoller directly, you'll have many functions.
One of them it's 'create', where you can return a view directly, but you'll need to import
that controller file in web.php:

1. To import:
    use <route>
    For example: App\Http\Controllers\EmpleadoController
    (Note the first letter must be with uppercase)

2. Inside of your controller file (in my case is EmpleadoController.php), put in a create function the next code:
    return view('<your view file>');

    For example:
        return view('employee.create');

3. Now, inside web.php file, code your route:
    Route::get('/employee/create',[EmpleadoController::class,'create']);
    (check web.php)

When you want to access to all the routes, very simple, just code the next:
    Route::resource('employee',EmpleadoController::class);

Now, you'll be able to handle all the routes that exists in your app.

You can check how many routes are active with the next command:
    php artisan route:list

-------------------------- Creating a Form -----------------------------
As an example, I used create.blade.php.

////IMAGES and FILES////
1. Call a form with post method.
2. For calling img or files, you need a property call:
    enctype='multipart/form-data'

-------------------------- Data recepton ------------------------------
In your form, there're an 'action' part where you need to put what it'll be the behavior
the page'll have.

1. Code the rute you'll use:
    <form action= {{url('/employee)}};

2. Laravel gives us a tool for sharing or sending information. This's a secure key:
    <form ....
        @csrf

3. In your controller file, in the store function, code the next:
    //a variable for testing
    $datos = request()->all();
    return response()->json($datos);
(With this you'll be able to check if your information is arriving, and with
the secure key, the data is arriving with a token.)

------------------------------ insert data -----------------------
1. Insert data inside db:
    //Receive all data except the token
        $datos = request()->except('_token');

    //Take Empleado model and insert them in the db
        Empleado::insert( $datos );

    //Show the information
        return response()->json($datos);

-------------------------- Add img --------------------------------------
To insert a photo, it's necessary to create an IF:

1. If the file that you're sending it has something, we'll modify the file's name.

    if($request->hasFile('Foto')){
        //datos is equal to foto's name, and store it in a function with name uploads in the folder public
        $datos['Foto']=$request->file('Foto)->store('uploads','public');
    }

(You can access your file in:
    /storage/app/public/uploads/    
)

----------------------------- Query data -------------------------------
In this case, we need to use index function of your EmpleadoController.
Also, we'll use index.blade.php

1. Create a variable with the employee value.
    //                           we'll take the five first records.
    $datos['employees']=Empleado::paginate(5);

2. Return the data inside of the 'return'.
    return view('employee.index', $data);

3. Go to index.blade.php

4. You can create a design with bootstrap. The importa part of this is how we show the infor:
    
    @foreach ($employees as $employee)
        <information that you'll show>
    @endforeach

---------------------------- Delete data ---------------------------
1. You need to create a new form:post that you'll add, in the action, and url
    action={{ url('/empleado/'.$empleado->id)}}
    (This code has to aim to ID.)
    (Remember when you make a form, you have to create a key @csrf)

2. Create DELETE method:
    {{ method_field('DELETE') }}

3. Go EmpleadoController.php and look for destroy function:
    public function destroy($id)
    {
        Empleado::destroy($id);
        return redirect('employee');
    }

-------------------------------- Edit and update ----------------------------
In this case, we'l use form.blade.php

1. Everything we've done in create.blade.php, just the form part, copy and paste in
form.blade.php

2. Ans just include the form module in create.blade.php and edit.blade.php:
    @include('employee.form');

3. In edit.blade, you can add an "a" label and code:
    <a href="{{ url('/employee/'.$empleado->id.'/edit') }}">

4. Code a return in our Controller:
    return view('employee.edit');

5. In the controller, inside of edit function, code;:
    //                  Find our search exactly
    $empleado=Empleado::findOrFail($id);

6. Our return'll be:
    public function edit($id)
    {
        $empleado=Empleado::findOrFail($id);
        return view('employee.edit', compact('empleado'));
    }

(In our HTML, we can add and value with the query
    value="{{ $empleado->Nombre }}"
)

------------------------ Save new data ------------------------------
Continue in edit.blade

1. Code a new post form.
    <form action="{{ url('/employee/'.$empleado->$id ) }}" method="post" enctype="multipart/form-data">
        @call_user_func
        {{ method_field('PATCH') }}

        @include('employee.form')

    </form>

Now, controller, update function:
1. public function update(Request $request, $id)
    {
        //                                  do not resect
        $datos = request()->except(['_token','_method']);
        //Update
        Empleado::where('id','=',$id)->update($datos);

        //reload
        $empleado=Empleado::findOrFail($id);
        return view('employee.edit', compact('empleado'));
    }

-------------------------- show img -----------------------------
In index.blade

1. In tbody, after of Foto seccion, put a img label with the next source:
    //         allowing access to storage
    <img src="{{ asset('storage').'/'.$empleado->Foto}}" alt="">

2. Type the next command for connecting the storage with app:
    php artisan storage:link

_______________ Modify IMG _______________
We need to add a new class in the beggining of the code:
    use Illuminate\Support\Facades\Storage;

1. Copy the if function we did in storage, and paste inside of update, but we'll add new data:
    if($request->hasFile('Foto')){
        $empleado=Empleado::findOrFail($id);
        //Delete information
        Storage::delete('public/'.$empleado->Foto);
        
        $datos['Foto']=$request->file('Foto')->store('uploads','public');
    }

----------------------------- Delete photo of Storage ---------------------
In destroy function inside of your Controller

1. Select which photo we go to delete:
    $empleado=Empleado::findOrFail($id);

2. If that photo exists, delete it:
    if(Storage::delete('public/'.$empleado->Foto)){
        Empleado::destroy($id);
    }

-------------------------- Show a confirmation message ----------------
Go to index.blade, and copy this code:

1. If there're a message, show it:
    
    @if(Session::has('mensaje'))
    {{ Session::get('mensaje') }}
    @endif

2. In our controller, inside of store function:
    
    return redirect('employee')->with('mensaje','Empleado agregado con exito');

(We'll already not return a json)

--------------------------- Receive data -------------------------
1. In edit.blade, edit:

    @include('employee.form',['modo'='Editar']) 

2. In create.blade, edit:

    @include('employee.form',['modo'=>'Crear'])

With this way, we can modify and receive data between forms.
Now, you can edit, for example, the input value. If you had 'Save data', now you can:

    value="{{ $modo }} data"

When your form detect in which blade is, automatically it'll change the value name.

--------------------- Bootstrap and login --------------------------
1. Interface integration, code in terminal:
    composer require laravel/ui

2. To integrate bootstrap:
    php artisan ui bootstrap --auth

3. To install node:
    npm install

4. Run it:
    npm run dev

(Go localhost public and note your system already has a login)

----------------------- Start Login -------------------------------
In web.php

1. Modify the main route:
    Route::get('/', function () {
        return view('auth.login');
    });

This is because when anyone accesses to our page, it'll be necessary they enter to login directly.

2. Once the user is logging, we need to redirect it in the new index:
    Route::group(['middleware' => 'auth'],function(){
        Route::get('/home', [EmpleadoController::class, 'index'])->name('home');
    });

3. Once before route we had, it was:
    
    Route::get('/home', [App\Http\Controllers\HomeController::class, 'index'])->name('home');

But, now we need to modify it the main route the user will enter:
    
    Route::get('/home', [EmpleadoController::class, 'index'])->name('home');

In this way, once the user is logging, when it reload the page, it'll continue there until finish the login.

---------------------- Using template -----------------------------
In /resources/views/auth exists a login.blade. This code helps us for creating a
template and keeping it in the top of our page.

In this blade file, note and extends statement.

1. In the login.blade, copy the first three linea of code:
    @extends('layouts.app')

    @section('content')
    <div class="container">

2. Paste them in index.blade, at the begining. At the bottom of the page,
close the new label we created:

    </div>
    @endsection

Now, check your current page, and note the design was created and adapted.

3. Do the same steps with create, and edit.
------------------------ Security settings ---------------------------
In web.php

1. In our route Route::resource('employee', EmpleadoController::class), we need to code:
   
    Route::resource('employee', EmpleadoController::class)->middleware('auth');

With this, the system will respect the log.

2. For desappear Register and Remember Password, in Auth::routes(), code:

    //          Inside put the rules you want to desappear.
    Auth::routes(['register'=>false,'reset'=>false]);

( ----------------------- Add style with Bootstrap -------------------- )
------------------------------ Data validation --------------------------
In EmpleadoController.php

1. Inside of store function:

    $campos=[
        'Nombre'=>'required|string|max:100',
        'ApellidoPaterno'=>'required|string|max:100',
        'ApellidoMaterno'=>'required|string|max:100',
        'Correo'=>'required|email',
        'Foto'=>'required|max:100|mimes:jpeg,png,jpg',
    ];
    $mensajeError=[
        'required"=>"El :attribute es requerido',
        'Foto.required'=>'Es necesario seleccionar una imagen',
    ];

    $this->validate($request,$campos,$mensajeError);

This forces the fields to be filled out so as not to send an empty form.

2. Now, in form.blade, we'll show the messages. Code at the beginning:

    @if(count($errors)>0)
    <div class="alert alert-danger" role="alert">
        <ul>
            @foreach($errors->all() as $error)
                <li> {{ $error }} </li>
            @endforeach
        </ul>
    </div>
    @endif


